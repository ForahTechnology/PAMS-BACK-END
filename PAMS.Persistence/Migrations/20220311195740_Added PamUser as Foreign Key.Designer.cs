// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PAMS.Persistence.Context;

namespace PAMS.Persistence.Migrations
{
    [DbContext(typeof(PAMSdbContext))]
    [Migration("20220311195740_Added PamUser as Foreign Key")]
    partial class AddedPamUserasForeignKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualityParameter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirQualityTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AirQualityTemplateId");

                    b.ToTable("AirQualityParameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualitySample", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AirQualitySamples");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualitySampleParameter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirQualitySampleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AirQualitySampleId");

                    b.ToTable("AirQualitySampleParameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualityTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AirQualityTemplates");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.ClientSample", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SampleTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ClientSamples");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.DPR", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("DPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.DPRParameterTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DPRID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DPRID");

                    b.ToTable("DPRParameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.EquipmentInventory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discountinued")
                        .HasColumnType("bit");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyExpiration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EquipmentInventories");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FMEnv", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FMVEnvs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FMEnvParameterTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FMEnvID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FMEnvID");

                    b.ToTable("FMEnvParameterTemplates");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.CO2Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("CO2Tests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.CO2TestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("CO2TestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.CO2TestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("CO2TestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COMBTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("COMBTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COMBTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("COMBTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COMBTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("COMBTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("COTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("COTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("COTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.DPRField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ImageModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("PamsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SamplePointLocationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageModelId");

                    b.HasIndex("PamsUserId");

                    b.HasIndex("SamplePointLocationId");

                    b.ToTable("DPRFields");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ImageModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("PamsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SamplePointLocationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageModelId");

                    b.HasIndex("PamsUserId");

                    b.HasIndex("SamplePointLocationId");

                    b.ToTable("FMENVFields");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.FieldLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique()
                        .HasFilter("[DPRFieldId] IS NOT NULL");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique()
                        .HasFilter("[FMENVFieldId] IS NOT NULL");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique()
                        .HasFilter("[NESREAFieldId] IS NOT NULL");

                    b.ToTable("FieldLocations");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.H2STest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("H2STests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.H2STestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("H2STestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.H2STestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("H2STestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.HMTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("HMTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.HMTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("HMTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.HMTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("HMTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ImageModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("PamsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SamplePointLocationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageModelId");

                    b.HasIndex("PamsUserId");

                    b.HasIndex("SamplePointLocationId");

                    b.ToTable("NESREAFields");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NO2Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("NO2Tests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NO2TestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("NO2TestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NO2TestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("NO2TestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NoiseTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("NoiseTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NoiseTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("NoiseTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NoiseTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("NoiseTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.O2Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("O2Tests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.O2TestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("O2TestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.O2TestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("O2TestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PM5Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("PM5Tests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PM5TestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("PM5TestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PM5TestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("PM5TestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PMTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("PMTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PMTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("PMTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PMTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("PMTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SO2Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("SO2Tests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SO2TestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("SO2TestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SO2TestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("SO2TestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SamplePointLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.ToTable("SamplePointLocations");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.TempTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("TempTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.TempTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("TempTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.TempTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("TempTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.VOCTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NESREAFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NESREAFieldId")
                        .IsUnique();

                    b.ToTable("VOCTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.VOCTestDPR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DPRFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DPRFieldId")
                        .IsUnique();

                    b.ToTable("VOCTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.VOCTestFM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FMENVFieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestResult")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FMENVFieldId")
                        .IsUnique();

                    b.ToTable("VOCTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.ImageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LogoBase64")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ImageModels");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfLastOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ItemDiscontinued")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityLeft")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("QuantityUsed")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ReorderLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQty")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InoviceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Items")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<Guid>("SamplingID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.MicroBiologicalAnalysis", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Microbial_Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SamplingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Test_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ReportID");

                    b.HasIndex("SamplingID");

                    b.ToTable("MicroBiologicalAnalyses");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.MicroBiologicalAnalysisTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Microbial_Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhysicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MicroBiologicalAnalysisTemplates");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.NESREA", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NESREAs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.NESREAParameterTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NESREAID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("NESREAID");

                    b.ToTable("NESREAParameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.PamsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ImageModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordResetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageModelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.PhysicoChemicalAnalysis", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Limit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SamplingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Test_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test_Performed_And_Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ReportID");

                    b.HasIndex("SamplingID");

                    b.ToTable("PhysicoChemicalAnalyses");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Batch_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificate_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Analysed_In_Lab")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Recieved_In_Lab")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lab_Analyst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lab_Env_Con")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lab_Sample_Ref_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sample_Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sample_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SamplingID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Sampling", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GPSLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SamplingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Samplings");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Setting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lab_Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.UserActivation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserActivations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.PamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.PamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAMS.Domain.Entities.PamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.PamsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualityParameter", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.AirQualityTemplate", "AirQualityTemplate")
                        .WithMany("Parameters")
                        .HasForeignKey("AirQualityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirQualityTemplate");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualitySampleParameter", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.AirQualitySample", "AirQualitySample")
                        .WithMany("Parameters")
                        .HasForeignKey("AirQualitySampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirQualitySample");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.DPRParameterTemplate", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.DPR", "DPR")
                        .WithMany("DPRParameterTemplates")
                        .HasForeignKey("DPRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPR");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FMEnvParameterTemplate", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FMEnv", "FMEnv")
                        .WithMany("Parameters")
                        .HasForeignKey("FMEnvID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMEnv");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.CO2Test", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("CO2Tests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.CO2Test", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.CO2TestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("CO2TestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.CO2TestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.CO2TestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("CO2TestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.CO2TestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COMBTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("COMBTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.COMBTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COMBTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("COMBTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.COMBTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COMBTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("COMBTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.COMBTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("COTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.COTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("COTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.COTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.COTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("COTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.COTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.DPRField", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.ImageModel", "ImageModel")
                        .WithMany()
                        .HasForeignKey("ImageModelId");

                    b.HasOne("PAMS.Domain.Entities.PamsUser", "PamsUser")
                        .WithMany()
                        .HasForeignKey("PamsUserId");

                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.SamplePointLocation", "SamplePointLocation")
                        .WithMany("DPRFields")
                        .HasForeignKey("SamplePointLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageModel");

                    b.Navigation("PamsUser");

                    b.Navigation("SamplePointLocation");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.ImageModel", "ImageModel")
                        .WithMany()
                        .HasForeignKey("ImageModelId");

                    b.HasOne("PAMS.Domain.Entities.PamsUser", "PamsUser")
                        .WithMany()
                        .HasForeignKey("PamsUserId");

                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.SamplePointLocation", "SamplePointLocation")
                        .WithMany("FMENVFields")
                        .HasForeignKey("SamplePointLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageModel");

                    b.Navigation("PamsUser");

                    b.Navigation("SamplePointLocation");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.FieldLocation", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("FieldLocations")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.FieldLocation", "DPRFieldId");

                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("FieldLocations")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.FieldLocation", "FMENVFieldId");

                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("FieldLocations")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.FieldLocation", "NESREAFieldId");

                    b.Navigation("DPRField");

                    b.Navigation("FMENVField");

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.H2STest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("H2STests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.H2STest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.H2STestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("H2STestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.H2STestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.H2STestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("H2STestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.H2STestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.HMTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("HMTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.HMTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.HMTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("HMTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.HMTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.HMTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("HMTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.HMTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.ImageModel", "ImageModel")
                        .WithMany()
                        .HasForeignKey("ImageModelId");

                    b.HasOne("PAMS.Domain.Entities.PamsUser", "PamsUser")
                        .WithMany()
                        .HasForeignKey("PamsUserId");

                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.SamplePointLocation", "SamplePointLocation")
                        .WithMany("NESREAFields")
                        .HasForeignKey("SamplePointLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageModel");

                    b.Navigation("PamsUser");

                    b.Navigation("SamplePointLocation");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NO2Test", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("NO2Tests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.NO2Test", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NO2TestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("NO2TestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.NO2TestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NO2TestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("NO2TestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.NO2TestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NoiseTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("NoiseTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.NoiseTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NoiseTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("NoiseTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.NoiseTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NoiseTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("NoiseTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.NoiseTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.O2Test", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("O2Tests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.O2Test", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.O2TestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("O2TestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.O2TestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.O2TestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("O2TestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.O2TestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PM5Test", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("PM5Tests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.PM5Test", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PM5TestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("PM5TestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.PM5TestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PM5TestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("PM5TestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.PM5TestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PMTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("PMTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.PMTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PMTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("PMTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.PMTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.PMTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("PMTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.PMTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SO2Test", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("SO2Tests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.SO2Test", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SO2TestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("SO2TestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.SO2TestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SO2TestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("SO2TestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.SO2TestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SamplePointLocation", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.Client", "Client")
                        .WithMany("SamplePointLocations")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.TempTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("TempTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.TempTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.TempTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("TempTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.TempTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.TempTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("TempTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.TempTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.VOCTest", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", "NESREAField")
                        .WithOne("VOCTests")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.VOCTest", "NESREAFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREAField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.VOCTestDPR", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.DPRField", "DPRField")
                        .WithOne("VOCTestDPRs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.VOCTestDPR", "DPRFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DPRField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.VOCTestFM", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", "FMENVField")
                        .WithOne("VOCTestFMs")
                        .HasForeignKey("PAMS.Domain.Entities.FieldScientistEntities.VOCTestFM", "FMENVFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FMENVField");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.MicroBiologicalAnalysis", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.Report", null)
                        .WithMany("MicroBiologicalAnalyses")
                        .HasForeignKey("ReportID");

                    b.HasOne("PAMS.Domain.Entities.Sampling", "Sampling")
                        .WithMany("MicroBiologicalAnalyses")
                        .HasForeignKey("SamplingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sampling");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.NESREAParameterTemplate", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.NESREA", "NESREA")
                        .WithMany("NESREAParameterTemplates")
                        .HasForeignKey("NESREAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NESREA");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.PamsUser", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.ImageModel", "ImageModel")
                        .WithMany()
                        .HasForeignKey("ImageModelId");

                    b.Navigation("ImageModel");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.PhysicoChemicalAnalysis", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.Report", null)
                        .WithMany("PhysicoChemicalAnalyses")
                        .HasForeignKey("ReportID");

                    b.HasOne("PAMS.Domain.Entities.Sampling", "Sampling")
                        .WithMany("PhysicoChemicalAnalyses")
                        .HasForeignKey("SamplingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sampling");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Sampling", b =>
                {
                    b.HasOne("PAMS.Domain.Entities.Client", "Client")
                        .WithMany("Samplings")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualitySample", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.AirQualityTemplate", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Client", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SamplePointLocations");

                    b.Navigation("Samplings");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.DPR", b =>
                {
                    b.Navigation("DPRParameterTemplates");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FMEnv", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.DPRField", b =>
                {
                    b.Navigation("CO2TestDPRs");

                    b.Navigation("COMBTestDPRs");

                    b.Navigation("COTestDPRs");

                    b.Navigation("FieldLocations");

                    b.Navigation("H2STestDPRs");

                    b.Navigation("HMTestDPRs");

                    b.Navigation("NO2TestDPRs");

                    b.Navigation("NoiseTestDPRs");

                    b.Navigation("O2TestDPRs");

                    b.Navigation("PM5TestDPRs");

                    b.Navigation("PMTestDPRs");

                    b.Navigation("SO2TestDPRs");

                    b.Navigation("TempTestDPRs");

                    b.Navigation("VOCTestDPRs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.FMENVField", b =>
                {
                    b.Navigation("CO2TestFMs");

                    b.Navigation("COMBTestFMs");

                    b.Navigation("COTestFMs");

                    b.Navigation("FieldLocations");

                    b.Navigation("H2STestFMs");

                    b.Navigation("HMTestFMs");

                    b.Navigation("NO2TestFMs");

                    b.Navigation("NoiseTestFMs");

                    b.Navigation("O2TestFMs");

                    b.Navigation("PM5TestFMs");

                    b.Navigation("PMTestFMs");

                    b.Navigation("SO2TestFMs");

                    b.Navigation("TempTestFMs");

                    b.Navigation("VOCTestFMs");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.NESREAField", b =>
                {
                    b.Navigation("CO2Tests");

                    b.Navigation("COMBTests");

                    b.Navigation("COTests");

                    b.Navigation("FieldLocations");

                    b.Navigation("H2STests");

                    b.Navigation("HMTests");

                    b.Navigation("NO2Tests");

                    b.Navigation("NoiseTests");

                    b.Navigation("O2Tests");

                    b.Navigation("PM5Tests");

                    b.Navigation("PMTests");

                    b.Navigation("SO2Tests");

                    b.Navigation("TempTests");

                    b.Navigation("VOCTests");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.FieldScientistEntities.SamplePointLocation", b =>
                {
                    b.Navigation("DPRFields");

                    b.Navigation("FMENVFields");

                    b.Navigation("NESREAFields");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.NESREA", b =>
                {
                    b.Navigation("NESREAParameterTemplates");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Report", b =>
                {
                    b.Navigation("MicroBiologicalAnalyses");

                    b.Navigation("PhysicoChemicalAnalyses");
                });

            modelBuilder.Entity("PAMS.Domain.Entities.Sampling", b =>
                {
                    b.Navigation("MicroBiologicalAnalyses");

                    b.Navigation("PhysicoChemicalAnalyses");
                });
#pragma warning restore 612, 618
        }
    }
}
